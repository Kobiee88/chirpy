// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: token.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens (token, user_id, expires_at, created_at)
VALUES ($1, $2, $3, $4)
RETURNING token, user_id, expires_at, created_at, updated_at, revoked_at
`

type CreateRefreshTokenParams struct {
	Token     string
	UserID    uuid.NullUUID
	ExpiresAt sql.NullTime
	CreatedAt time.Time
}

type CreateRefreshTokenRow struct {
	Token     string
	UserID    uuid.NullUUID
	ExpiresAt sql.NullTime
	CreatedAt time.Time
	UpdatedAt time.Time
	RevokedAt sql.NullTime
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (CreateRefreshTokenRow, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken,
		arg.Token,
		arg.UserID,
		arg.ExpiresAt,
		arg.CreatedAt,
	)
	var i CreateRefreshTokenRow
	err := row.Scan(
		&i.Token,
		&i.UserID,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.RevokedAt,
	)
	return i, err
}

const getUserIdFromRefreshToken = `-- name: GetUserIdFromRefreshToken :one
SELECT u.id
FROM users u
JOIN refresh_tokens rt ON u.id = rt.user_id
WHERE rt.token = $1 AND (rt.expires_at IS NULL OR rt.expires_at > NOW()) AND rt.revoked_at IS NULL
`

func (q *Queries) GetUserIdFromRefreshToken(ctx context.Context, token string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getUserIdFromRefreshToken, token)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :exec
UPDATE refresh_tokens
SET revoked_at = NOW(), updated_at = NOW()
WHERE token = $1
`

func (q *Queries) RevokeRefreshToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, revokeRefreshToken, token)
	return err
}
